import json
from duneanalytics import DuneAnalytics


# initialize client
dune = DuneAnalytics('user', 'password')

# try to login
dune.login()

# fetch token
dune.fetch_auth_token()
newQuery = "WITH\nusers as ((\nSELECT *\n   FROM (\n   \n         VALUES (decode('00017f958d2ee523a2206206994597c13d831ec7', 'hex')),\n                (decode('36416D81e590FF67370E4523B9Cd3257Aa0A853c', 'hex')),\n                (decode('b0e83c2d71a991017e0116d58c5765abc57384af', 'hex')),\n                (decode('c143bc1af9f3843db49670e43a2f055a47385d6b', 'hex')),\n                (decode('a6ddbd0de6b310819b49f680f65871bee85f517e', 'hex'))\n ) AS t (owner)) \n UNION\n (Select owner FROM gnosis_protocol_v2.\"GPv2Settlement_evt_Trade\" trades group by owner )\n),\ntrades_with_sell_price AS (\n    SELECT \n        \"evt_block_time\" as batch_time, \n        evt_tx_hash,\n        owner,\n        \"orderUid\",\n        \"sellToken\" as sell_token,\n        \"buyToken\" as buy_token,\n        (\"sellAmount\" - \"feeAmount\")/ pow(10,p.decimals) as units_sold,\n        \"buyAmount\",\n        \"feeAmount\" / pow(10,p.decimals) as fee,\n        price as sell_price\n    FROM gnosis_protocol_v2.\"GPv2Settlement_evt_Trade\" trades\n    LEFT OUTER JOIN prices.usd as p\n        ON trades.\"sellToken\" = p.contract_address\n        AND p.minute > TO_DATE('2021-06-03', 'YYYY/MM/DD') --! Deployment Date\n        AND date_trunc('minute', p.minute) = date_trunc('minute', evt_block_time)\n   Where owner IN (Select * from users)\n),\n\ntrades_with_prices AS (\n    SELECT \n        batch_time, \n        evt_tx_hash,\n        owner,\n        \"orderUid\",\n        sell_token,\n        buy_token,\n        units_sold,\n        \"buyAmount\" / pow(10,p.decimals) as units_bought,\n        fee,\n        sell_price,\n        price as buy_price\n    FROM trades_with_sell_price t\n    LEFT OUTER JOIN prices.usd as p\n        ON p.contract_address = (\n                CASE \n                    WHEN t.buy_token = '\\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' THEN '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n                    ELSE t.buy_token\n                END)\n        AND p.minute > TO_DATE('2021-06-03', 'YYYY/MM/DD') --! Deployment Date\n        AND date_trunc('minute', p.minute) = date_trunc('minute', batch_time)\n    Where owner IN (Select * from users)\n),\n\ntrade_values AS (\n    SELECT \n        batch_time,\n        evt_tx_hash,\n        owner,\n        \"orderUid\" order_id,\n        -- We use sell value when possible and buy value when not\n        (CASE\n            WHEN sell_price IS NOT NULL THEN sell_price * units_sold\n            WHEN sell_price IS NULL AND buy_price IS NOT NULL THEN buy_price * units_bought\n            ELSE  -0.01\n        END) as trade_value,\n        sell_price * fee as fee_value\n    FROM trades_with_prices\n),\nuser_stats_of_gp as (\nSELECT \n    substring(CAST(date(batch_time) AS VARCHAR(19)), 1, 7) as month,\n    count(*) as number_of_trades,\n    sum(trade_value) as cowswap_usd_volume,\n    sum(fee_value) as cowswap_fee_volume,\n    owner\nFROM trade_values\nWHERE date(batch_time) >= TO_DATE('2021-06-03', 'YYYY/MM/DD') --! 2 days before Launch Date\nGROUP BY owner, month\nORDER BY owner DESC),\nuser_stats_general as (\nSelect \n    substring(CAST(date(block_time) AS VARCHAR(19)), 1, 7) as month,\n    sum(usd_amount) as usd_volume_all_exchanges,\n    trader_a as owner \nfrom dex.trades\nWHERE date(block_time) >= TO_DATE('2021-06-03', 'YYYY/MM/DD')\nand trader_a IN (Select * from users)\ngroup by owner, month\n)\n-- Select * from user_stats_general\nSelect Case When user_stats_general.owner is Null Then user_stats_of_gp.owner ELSE user_stats_general.owner END as owner ,\nCase When user_stats_general.month is NUll Then user_stats_of_gp.month ELSE user_stats_general.month END as month,\nnumber_of_trades, \ncowswap_usd_volume,\nusd_volume_all_exchanges\nfrom user_stats_of_gp \nfull outer join user_stats_general \non (user_stats_general.owner = user_stats_of_gp.owner and user_stats_general.month = user_stats_of_gp.month)"
dune.initiate_new_query(query_id=101571, query=newQuery)
